############################################################################
#
# Copyright 2014 BMW Car IT GmbH
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
############################################################################

IF(WIN32 AND NOT UNIX)
    set(CPACK_GENERATOR "ZIP")
    SET(GIT_ARCHIVE_FORMAT zip)
ELSE()
    set(CPACK_GENERATOR "RPM")
    SET(GIT_ARCHIVE_FORMAT tar)
ENDIF()

INCLUDE(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.SCM_VERSION OPTIONAL)

IF(NOT DEFINED SCM_VERSION)

    IF(NOT GIT_FOUND)
        FIND_PACKAGE(Git)
    ENDIF()

    EXEC_PROGRAM(${GIT_EXECUTABLE} ${CMAKE_SOURCE_DIR}
        ARGS rev-list HEAD --count
        OUTPUT_VARIABLE commit_count
    )

    EXEC_PROGRAM(${GIT_EXECUTABLE} ${CMAKE_SOURCE_DIR}
        ARGS describe --long --always --dirty
        OUTPUT_VARIABLE commit_hash
    )

    SET(SCM_VERSION ${commit_count}-${commit_hash})

ENDIF()

SET(CPACK_RPM_COMPONENT_INSTALL         1)
SET(CPACK_ARCHIVE_COMPONENT_INSTALL     1)
SET(CPACK_PACKAGE_VERSION_MAJOR         "${PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR         "${PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH         "${PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION               "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_NAME                  "${PROJECT_NAME}")
SET(CPACK_PACKAGE_CONTACT               "${PROJECT_CONTACT}")
SET(CPACK_PACKAGE_VENDOR                "${PROJECT_COMPANY}")
SET(CPACK_SYSTEM_NAME                   "${TARGET_OS}-${TARGET_ARCH}")
SET(CPACK_PACKAGE_FILE_NAME             "${CPACK_PACKAGE_NAME}-${SCM_VERSION}-${CPACK_SYSTEM_NAME}")

INCLUDE(CPack)


# prepare list of libraries

#GET_TARGET_PROPERTY(LIST_STATIC_LIBS ${PROJECT_NAME} LIST_STATIC_LIBRARY)
#IF(NOT "${LIST_STATIC_LIBS}" STREQUAL "LIST_STATIC_LIBS-NOTFOUND")
#    SET(PACKAGE_LIBS "${PACKAGE_LIBS} ${LIST_STATIC_LIBS}")
#ENDIF()

#GET_TARGET_PROPERTY(LIST_SHARED_LIBS ${PROJECT_NAME} LIST_SHARED_LIBRARY)
#IF(NOT "${LIST_SHARED_LIBS}" STREQUAL "LIST_SHARED_LIBS-NOTFOUND")
#    SET(PACKAGE_LIBS "${PACKAGE_LIBS} ${LIST_SHARED_LIBS}")
#ENDIF()

# generate cmake find module
#SET(GENERATED_FIND_MODULE_PATH ${CMAKE_BINARY_DIR}/Find${PROJECT_NAME}.cmake)
#
#FILE(WRITE  ${GENERATED_FIND_MODULE_PATH} "# CMake find module for project '${PROJECT_NAME}'\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "# generated by ACME2\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "# prefix is location of this find-module without\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "# the relative install location of find-modules\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(ABSOLUTE_FINDMODULE_PATH \${CMAKE_CURRENT_LIST_DIR})\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(RELATIVE_FINDMODULE_PATH ${PROJECT_INSTALL_CMAKEFINDMODULE})\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "STRING(REPLACE \"/\${RELATIVE_FINDMODULE_PATH}\" \"\" PREFIX \"\${ABSOLUTE_FINDMODULE_PATH}\")\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "# set result variables\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(${PROJECT_NAME}_INCLUDE_DIRS \${PREFIX}/${PROJECT_INSTALL_HEADER})\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(${PROJECT_NAME}_LIBRARY_DIRS \${PREFIX}/${PROJECT_INSTALL_STATIC_LIB})\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(${PROJECT_NAME}_LIBRARIES   ${PACKAGE_LIBS})\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "SET(${PROJECT_NAME}_FOUND        TRUE)\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "MESSAGE(STATUS \"FindModule ${CMAKE_INSTALL_PREFIX}/${PROJECT_INSTALL_CMAKEFINDMODULE}/Find${PROJECT_NAME}.cmake\")\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "MESSAGE(STATUS \"${PROJECT_NAME}_INCLUDE_DIRS = \${${PROJECT_NAME}_INCLUDE_DIRS}\")\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "MESSAGE(STATUS \"${PROJECT_NAME}_LIBRARY_DIRS = \${${PROJECT_NAME}_LIBRARY_DIRS}\")\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "MESSAGE(STATUS \"${PROJECT_NAME}_LIBRARIES    = \${${PROJECT_NAME}_LIBRARIES}\")\n")
#FILE(APPEND ${GENERATED_FIND_MODULE_PATH} "MESSAGE(STATUS \"${PROJECT_NAME}_FOUND        = \${${PROJECT_NAME}_FOUND}\")\n")
#
#INSTALL(FILES ${GENERATED_FIND_MODULE_PATH} DESTINATION ${PROJECT_INSTALL_CMAKEFINDMODULE} COMPONENT "${PROJECT_NAME}-devel")

# generate pkfconfig file
#SET(GENERATED_PKGCONFIG_FILE_PATH ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc)

#FILE(WRITE  ${GENERATED_PKGCONFIG_FILE_PATH} "# PkgConfig file for project '${PROJECT_NAME}'\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "# generated by ACME2\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "prefix=${PROJECT_INSTALL_PREFIX}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "exec_prefix=\${prefix}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "includedir=\${prefix}/${PROJECT_INSTALL_HEADER}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "libdir_static=\${exec_prefix}/${PROJECT_INSTALL_STATIC_LIB}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "libdir_shared=\${exec_prefix}/${PROJECT_INSTALL_SHARED_LIB}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "Name: ${PROJECT_NAME}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "Description: ${PROJECT_DESCRIPTION}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "Version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\n")
#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "Cflags: -I\${includedir}\n")

#STRING (REPLACE " " ";" PACKAGE_LIB_LIST ${PACKAGE_LIBS})
#FOREACH(PACKAGE_LIB ${PACKAGE_LIB_LIST})
#    #ACME_WARNING("PACKAGE_LIB = ${PACKAGE_LIB}")
#    SET(PKGCONFIG_LIB_STRING "${PKGCONFIG_LIB_STRING} -l${PACKAGE_LIB}")
#ENDFOREACH()

#FILE(APPEND ${GENERATED_PKGCONFIG_FILE_PATH} "Libs: -L\${libdir_static} -L\${libdir_shared}${PKGCONFIG_LIB_STRING}\n")

#INSTALL(FILES ${GENERATED_PKGCONFIG_FILE_PATH} DESTINATION ${PROJECT_INSTALL_PKGCONFIG} COMPONENT "${ACME_PACKAGE_NAME}-devel")
